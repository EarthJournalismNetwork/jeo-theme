!function(e){var t={};function a(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=t,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(r,n,function(t){return e[t]}.bind(null,n));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p=".//dist",a(a.s=37)}({0:function(e,t){!function(){e.exports=this.wp.blockEditor}()},1:function(e,t){!function(){e.exports=this.wp.i18n}()},2:function(e,t){!function(){e.exports=this.wp.components}()},37:function(e,t,a){e.exports=a(38)},38:function(e,t,a){"use strict";a.r(t);var r=a(0),n=(a(2),a(1));function i(e){return function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return c(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);"Object"===a&&e.constructor&&(a=e.constructor.name);if("Map"===a||"Set"===a)return Array.from(e);if("Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a))return c(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,r=new Array(t);a<t;a++)r[a]=e[a];return r}wp.blocks.registerBlockType("jeo-theme/custom-image-gallery-block",{title:Object(n.__)("Image Gallery"),icon:"format-gallery",category:"common",keywords:[Object(n.__)("materialtheme"),Object(n.__)("photos"),Object(n.__)("images")],attributes:{galleryTitle:{type:"string"},images:{type:"array"},imagesDescriptions:{type:"array"},imagesCredits:{type:"array"}},edit:function(e){var t=e.attributes,a=(e.className,e.setAttributes),c=t.galleryTitle,l=void 0===c?"":c,o=t.images,s=void 0===o?[]:o,m=t.imagesDescriptions,u=void 0===m?[]:m,d=t.imagesCredits,f=void 0===d?[]:d;console.log(t),s.forEach((function(e,t){u[t]||(u[t]=""),f[t]||(f[t]="")}));var g=function(e){var t=s.filter((function(t,a){if(a!=e)return t}));u.splice(e,1),f.splice(e,1),a({images:t,imagesDescriptions:u,imagesCredits:f})};return React.createElement("div",{className:"image-gallery"},React.createElement(r.RichText,{tagName:"h2",className:"gallery-title",value:l,formattingControls:["bold","italic"],onChange:function(e){a({galleryTitle:e})},placeholder:Object(n.__)("Type a title")}),React.createElement("div",{className:"gallery-grid"},function(e){return e.map((function(e,t){return React.createElement("div",{className:"gallery-item-container"},React.createElement("img",{className:"gallery-item",src:e.url,key:e.id}),React.createElement(r.RichText,{tagName:"span",className:"description-field",value:u[t],formattingControls:["bold","italic"],onChange:function(e){a({imagesDescriptions:u.map((function(a,r){return r==t?e:a}))})},placeholder:Object(n.__)("Type here your description")}),React.createElement(r.RichText,{tagName:"span",className:"credit-field",value:f[t],formattingControls:["bold","italic"],onChange:function(e){a({imagesCredits:f.map((function(a,r){return r==t?e:a}))})},placeholder:Object(n.__)("Type the credits here")}),React.createElement("div",{className:"remove-item",onClick:function(){return g(t)}},React.createElement("span",{class:"dashicons dashicons-trash"})))}))}(s),React.createElement(r.MediaUpload,{onSelect:function(e){a({images:[].concat(i(s),i(e))})},type:"image",multiple:!0,value:s,render:function(e){var t=e.open;return React.createElement("div",{className:"select-images-button is-button is-default is-large",onClick:t},React.createElement("span",{class:"dashicons dashicons-plus"}))}})))},save:function(e){var t=e.attributes,a=t.galleryTitle,n=void 0===a?"":a,i=t.images,c=void 0===i?[]:i,l=t.imagesDescriptions,o=void 0===l?[]:l,s=t.imagesCredits,m=void 0===s?[]:s;return React.createElement("div",{className:"image-gallery"},React.createElement("div",{className:"image-gallery-wrapper"},React.createElement("div",{className:"gallery-title"},React.createElement(r.RichText.Content,{tagName:"h2",value:n})),React.createElement("div",{className:"actions"},React.createElement("button",{action:"display-grid"},React.createElement("i",{class:"fas fa-th"})),React.createElement("button",{action:"fullsreen"},React.createElement("i",{class:"fas fa-expand"}))),React.createElement("div",{className:"gallery-grid","data-total-slides":c.length},function(e){return e.map((function(t,a){return React.createElement("div",{className:"gallery-item-container"},React.createElement("img",{className:"gallery-item",key:e.id,src:t.url,alt:t.alt}),React.createElement("div",{class:"image-meta"},React.createElement("div",{class:"image-description"}," ",React.createElement(r.RichText.Content,{tagName:"span",value:o[a]})),React.createElement("i",{class:"fas fa-camera"}),React.createElement("div",{class:"image-credit"}," ",React.createElement(r.RichText.Content,{tagName:"span",value:m[a]}))))}))}(c))))}})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,