!function(e){var t={};function n(a){if(t[a])return t[a].exports;var l=t[a]={i:a,l:!1,exports:{}};return e[a].call(l.exports,l,l.exports,n),l.l=!0,l.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)n.d(a,l,function(t){return e[t]}.bind(null,l));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=".//dist",n(n.s=43)}({0:function(e,t){!function(){e.exports=this.wp.blockEditor}()},1:function(e,t){!function(){e.exports=this.wp.i18n}()},2:function(e,t){!function(){e.exports=this.wp.components}()},43:function(e,t,n){e.exports=n(44)},44:function(e,t,n){"use strict";n.r(t);var a=n(0),l=n(1),c=n(2);wp.blocks.registerBlockType("jeo-theme/custom-newsletter-block",{title:"Newsletter",icon:"email",category:"common",supports:{align:!0},attributes:{title:{type:"string"},typeNews:{type:"string"},subtitle:{type:"string"},newsletterShortcode:{type:"string"},lastEditionLink:{type:"string"},adicionalContent:{type:"string"},customStyle:{type:"string"}},edit:function(e){e.className,e.isSelected;var t=e.attributes,n=t.title,r=t.subtitle,o=(t.newsletterShortcode,t.adicionalContent),i=t.customStyle,s=t.typeNews,u=e.setAttributes;return React.createElement(React.Fragment,null,React.createElement("div",{className:"newsletter-wrapper",key:"container"},React.createElement("div",{class:"category-page-sidebar"},React.createElement(c.SelectControl,{label:Object(l.__)("Select newsletter type:"),value:s,onChange:function(e){u({typeNews:e})},options:[{value:null,label:"Select a type",disabled:!0},{value:"horizontal",label:"Horizontal"},{value:"vertical",label:"Vertical"}]}),React.createElement(c.TextControl,{label:Object(l.__)("Add custom css:"),value:i,onChange:function(e){u({customStyle:e})}}),React.createElement("div",{class:"newsletter"},React.createElement("div",null,React.createElement("i",{class:"fa fa-envelope fa-3x","aria-hidden":"true"}),React.createElement("div",{class:"newsletter-header"},React.createElement(a.RichText,{tagName:"p",placeholder:Object(l.__)("Title"),value:n,onChange:function(e){return u({title:e})}})),React.createElement("div",{class:"customized-content"},React.createElement(a.RichText,{tagName:"p",className:"anchor-text",placeholder:Object(l.__)("Subtitle"),value:r,onChange:function(e){return u({subtitle:e})}}))),React.createElement("div",null,React.createElement(a.InnerBlocks,{allowedBlocks:["core/shortcode"],template:[["core/shortcode",{placeholder:"Newsletter shortcode"}]]}),React.createElement(a.RichText,{tagName:"p",className:"link-add",placeholder:Object(l.__)("Adicional Information"),value:o,onChange:function(e){return u({adicionalContent:e})}}))))))},save:function(e){e.className,e.isSelected;var t=e.attributes,n=t.title,l=t.subtitle,c=(t.newsletterShortcode,t.adicionalContent),r=(t.align,t.typeNews),o=t.customStyle;e.setAttributes;return React.createElement(React.Fragment,null,React.createElement("div",{className:"newsletter-wrapper",key:"container"},React.createElement("div",{class:"category-page-sidebar"},React.createElement("div",{class:"newsletter ".concat(r," ").concat(o)},React.createElement("div",null,React.createElement("i",{class:"fa fa-envelope fa-3x","aria-hidden":"true"}),React.createElement("div",{class:"newsletter-header"},React.createElement("p",null,React.createElement(a.RichText.Content,{value:n}))),React.createElement("p",{class:"anchor-text"},React.createElement(a.RichText.Content,{value:l}))),React.createElement("div",null,React.createElement(a.InnerBlocks.Content,null),React.createElement(a.RichText.Content,{tagName:"p",className:"link-add",value:c}))))))}})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,